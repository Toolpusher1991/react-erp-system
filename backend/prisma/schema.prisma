// ==========================================
// PRISMA SCHEMA - MaintAIn CMMS Database
// ==========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// USER MODEL
// ==========================================

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedAssets      Asset[]        @relation("AssignedUsers")
  createdWorkOrders   WorkOrder[]    @relation("CreatedBy")
  assignedWorkOrders  WorkOrder[]    @relation("AssignedTo")
  comments            Comment[]
  notifications       Notification[]
  completedTasks      Task[]         @relation("CompletedBy")
  refreshTokens       RefreshToken[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  ADMIN
  E_SUPERVISOR
  M_SUPERVISOR
  MECHANIKER
  ELEKTRIKER
  RSC
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

// ==========================================
// REFRESH TOKEN MODEL (f√ºr Authentication)
// ==========================================

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

// ==========================================
// ASSET MODEL
// ==========================================

model Asset {
  id               Int         @id @default(autoincrement())
  name             String
  type             AssetType
  status           AssetStatus
  location         String
  serialNumber     String?
  parentAssetId    Int?
  notes            String?
  lastMaintenance  DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  assignedUsers User[]      @relation("AssignedUsers")
  workOrders    WorkOrder[]
  parentAsset   Asset?      @relation("SubAssets", fields: [parentAssetId], references: [id])
  subAssets     Asset[]     @relation("SubAssets")

  @@index([status])
  @@index([type])
}

enum AssetType {
  BOHRANLAGE
  MOTOR
  PUMPE
  BOHRTURM
  GENERATOR
  KOMPRESSOR
  SONSTIGES
}

enum AssetStatus {
  BETRIEB
  WARTUNG
  STOERUNG
  STILLSTAND
}

// ==========================================
// WORK ORDER MODEL
// ==========================================

model WorkOrder {
  id          Int               @id @default(autoincrement())
  title       String
  description String            @db.Text
  assetId     Int
  assetName   String
  type        WorkOrderType
  category    WorkOrderCategory
  priority    WorkOrderPriority
  status      WorkOrderStatus
  notes       String?           @db.Text

  // User Relations
  createdById    Int
  createdByName  String
  assignedToId   Int?
  assignedToName String?

  // Material Management
  materialRequired     Boolean       @default(false)
  materialStatus       MaterialStatus @default(NICHT_BENOETIGT)
  materialNumber       String?
  materialDescription  String?       @db.Text

  // SAP Integration
  sapOrderNumber       String?
  sapBasicStartDate    DateTime?
  sapEquipment         String?
  sapFunctionalLocation String?

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  asset      Asset         @relation(fields: [assetId], references: [id])
  createdBy  User          @relation("CreatedBy", fields: [createdById], references: [id])
  assignedTo User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  comments   Comment[]
  tasks      Task[]
  images     WorkOrderImage[]

  @@index([assetId])
  @@index([status])
  @@index([priority])
  @@index([createdById])
  @@index([assignedToId])
}

enum WorkOrderType {
  MECHANISCH
  ELEKTRISCH
  HYDRAULISCH
  SONSTIGES
}

enum WorkOrderCategory {
  IM_BETRIEB
  EINLAGERUNG_RIG_MOVES
}

enum WorkOrderPriority {
  NIEDRIG
  NORMAL
  HOCH
  KRITISCH
}

enum WorkOrderStatus {
  NEU
  ZUGEWIESEN
  IN_ARBEIT
  ERLEDIGT
  ABGEBROCHEN
}

enum MaterialStatus {
  NICHT_BENOETIGT
  BENOETIGT
  BESTELLT
  GELIEFERT
}

// ==========================================
// WORK ORDER IMAGE MODEL
// ==========================================

model WorkOrderImage {
  id          Int       @id @default(autoincrement())
  workOrderId Int
  filename    String
  filepath    String
  mimetype    String
  size        Int
  createdAt   DateTime  @default(now())

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
}

// ==========================================
// TASK MODEL (Sub-tasks for Work Orders)
// ==========================================

model Task {
  id              Int       @id @default(autoincrement())
  workOrderId     Int
  description     String    @db.Text
  completed       Boolean   @default(false)
  required        Boolean   @default(true)
  completedById   Int?
  completedByName String?
  completedAt     DateTime?
  createdAt       DateTime  @default(now())

  // Relations
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  completedBy User?     @relation("CompletedBy", fields: [completedById], references: [id])

  @@index([workOrderId])
  @@index([completed])
}

// ==========================================
// COMMENT MODEL
// ==========================================

model Comment {
  id          Int         @id @default(autoincrement())
  workOrderId Int
  userId      Int
  userName    String
  userRole    String
  comment     String      @db.Text
  type        CommentType
  oldValue    String?
  newValue    String?
  createdAt   DateTime    @default(now())

  // Relations
  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@index([workOrderId])
  @@index([userId])
}

enum CommentType {
  COMMENT
  STATUS_CHANGE
  ASSIGNMENT
  PRIORITY_CHANGE
}

// ==========================================
// NOTIFICATION MODEL
// ==========================================

model Notification {
  id             Int              @id @default(autoincrement())
  userId         Int
  type           NotificationType
  workOrderId    Int
  workOrderTitle String
  message        String           @db.Text
  read           Boolean          @default(false)
  createdById    Int
  createdByName  String
  createdAt      DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

enum NotificationType {
  COMMENT
  ASSIGNMENT
  STATUS_CHANGE
}

// ==========================================
// SAP MAINTENANCE ITEM MODEL
// ==========================================

model SAPMaintenanceItem {
  id                   String   @id @default(uuid())
  orderType            SAPOrderType
  mainWorkCenter       SAPWorkCenter
  orderNumber          String   @unique
  description          String
  actualRelease        String
  basicStartDate       DateTime
  equipment            String
  descriptionDetail    String   @db.Text
  functionalLocation   String
  systemStatus         String
  asset                String
  createdAt            DateTime @default(now())

  @@index([asset])
  @@index([orderType])
  @@index([mainWorkCenter])
  @@index([basicStartDate])
}

enum SAPOrderType {
  PM01
  PM02
}

enum SAPWorkCenter {
  ELEC
  MECH
}